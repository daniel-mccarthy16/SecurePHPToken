<?php

namespace SecureTokenPhp;

use InvalidArgumentException;



class Crypto
{
    public static function sign(Token $token, ?string $privateKey)
    {
        $algorithm = $token->getAlgorithm();
        if ($algorithm == JwsAlgorithmEnum::none) {
            throw new InvalidArgumentException("signing algorithm cannot be none dumbass");
        }
        return match ($algorithm) {
            JwsAlgorithmEnum::ES256 => self::SignEs256($token, $privateKey),
            JwsAlgorithmEnum::HS256 => self::SignHs256($token, $privateKey),
        };
    }

    public static function validate(Token $token, ?string $key = null): bool
    {
        return match ($token->getAlgorithm()) {
            JwsAlgorithmEnum::none => true,
            JwsAlgorithmEnum::ES256 => self::ValidateEs256($token, $key),
            JwsAlgorithmEnum::HS256 => self::ValidateHs256($token, $key),
            null => true
        };
    }

    private static function signEs256(Token $token, ?string $key = null): string
    {
        if ($key === null) {
            $key = Config::getEs256PrivateKey();
            if ($key === null) {
                throw new \Exception('No private key provided for ES256 signing.');
            }
        }
        $privateKeyResource = openssl_pkey_get_private($key);
        if (!$privateKeyResource) {
            throw new \Exception('Invalid private key for ES256 signing.');
        }
        $binarySignature = '';
        $encodedToken = $token->encode();
        openssl_sign($encodedToken, $binarySignature, $privateKeyResource, 'sha256');
        // Base64 encode the signature to make it URL safe
        $token->setSignature($binarySignature);
        return $encodedToken . "." . $token->getEncodedSignature();
    }

    private static function validateEs256(Token $token, ?string $publicKey = null): bool
    {
        if ($publicKey === null) {
            $publicKey = Config::getEs256PublicKey();
            if ($publicKey === null) {
                throw new \Exception('No public key provided for ES256 signing.');
            }
        }
        $encodedToken = $token->encode();
        $binarySignature = $token->getSignatureBinary();
        $publicKeyResource = openssl_pkey_get_public($publicKey);
        if (!$publicKeyResource) {
            throw new \Exception('Invalid public key for ES256 validation.');
        }
        $result = openssl_verify($encodedToken, $binarySignature, $publicKeyResource, 'sha256');
        return $result === 1;
    }

    private static function signHs256(Token $token, ?string $key = null): string
    {
        if ($key === null) {
            $key = Config::getEs256PublicKey();
            if ($key === null) {
                throw new \Exception('No private key provided for HS256 signing.');
            }
        }
        $encodedToken = $token->encode();
        $binarySignature = hash_hmac('sha256', data: $encodedToken, key: $key, binary: true);
        $token->setSignature($binarySignature);
        return $encodedToken . "." . $token->getEncodedSignature();
    }

    private static function validateHs256(Token $token, ?string $key = null): bool
    {
        if ($key === null) {
            $key = Config::getHs256Key();
            if ($key === null) {
                throw new \Exception('No private key provided for HS256 signing.');
            }
        }
        $encodedToken = $token->encode();
        $signatureFromToken = $token->getSignatureBinary();
        $computedSignature = hash_hmac('sha256', data: $encodedToken, key: $key, binary: true);
        return hash_equals($computedSignature, $signatureFromToken);
    }


    public static function encrypt(JweAlgorithmEnum $KeyManagementAlg, JweAlgorithmContentEncryption $aeadAlg, JweToken $token) {
        $key = match ($aeadAlg->value) {
         JweContentEncryptionEnum::A256GCM->value  => self::A256GCM($token),
        default => throw new \Exception("Content Algorithm Encyrption specified not supported")
        };
        $encryptedDek = self::encryptDek(key: $key, algorithm: $keyManagementAlg);
        return $token->encode();
    }

    private static function A256GCM(JweToken $token): string {

       $dek  = random_bytes(32);
       $iv = random_bytes(openssl_cipher_iv_length('aes-256-gcm'));
       $aad = $token->getEncodedHeader(); //include header as additional authenticated data
       $tagLength = 16;

        // Encrypt the data. The $tag is produced as a result of AEAD encryption
     $ciphertext = openssl_encrypt(
            $token->getEncodedPayload(), 
            'aes-256-gcm', 
            $dek, 
            OPENSSL_RAW_DATA, 
            $iv, 
            $tag, 
            $aad, 
            $tagLength
        );
        if ($ciphertext === null) {
            throw new Exception('Encryption failed: ' . openssl_error_string());
        }
        $token->setCipherText($ciphertext);

        //to be encyrpted by encyrptDEK function
        return $dek;
    }

    private static function encryptDEK(string $key, JweAlgorithmEnum $algorithm): string {
        return match  ($algorithm->value) {
            JweAlgorithmEnum::RSA_OAEP => self::encryptWithRsaOaep($key),
            default => throw new \Exception("Unsupported key management algorithm")
        };
    }

    private static function encryptWithRsaOaep(string $key): string {

        $token->getRecipientPublicKey = 
        // Implement RSA-OAEP encryption here.
        // You will need the recipient's public RSA key.
        // Use openssl_public_encrypt() with OPENSSL_PKCS1_OAEP_PADDING
        openssl_public_encrypt($key, $encryptedKey, $publicKey, OPENSSL_PKCS1_OAEP_PADDING);
        return base64_encode($encryptedKey);
    }

}

